From 78a6017b1b105fc7940d4d8c26c118b6553d1177 Mon Sep 17 00:00:00 2001
From: Klaus Zimmermann <klaus.zimmermann@smhi.se>
Date: Fri, 3 Feb 2023 10:29:05 +0100
Subject: [PATCH 2/7] Change `long int` to `long long` for Windows
 compatibility

---
 .../Base/interface/ESMF_InfoCDef.F90          |   8 +-
 .../Base/interface/ESMF_InfoCDefGeneric.F90   |   8 +-
 src/Infrastructure/Base/src/ESMCI_Info.C      |   3 +
 .../Base/src/ESMC_InfoCDefGeneric.C           |  16 +-
 src/Infrastructure/stubs/mpiuni/mpi.h         | 432 +++++++++---------
 5 files changed, 235 insertions(+), 232 deletions(-)

diff --git a/src/Infrastructure/Base/interface/ESMF_InfoCDef.F90 b/src/Infrastructure/Base/interface/ESMF_InfoCDef.F90
index c09c884595..6d2c236f22 100644
--- a/src/Infrastructure/Base/interface/ESMF_InfoCDef.F90
+++ b/src/Infrastructure/Base/interface/ESMF_InfoCDef.F90
@@ -3,7 +3,7 @@ interface
   function c_info_base_get(base_address) bind(C, name="ESMC_BaseGetInfo")
     use iso_c_binding
     implicit none
-    integer(C_LONG), intent(in) :: base_address
+    integer(C_LONG_LONG), intent(in) :: base_address
     type(C_PTR) :: c_info_base_get
   end function c_info_base_get
 
@@ -66,8 +66,8 @@ interface
   subroutine c_info_copyforattribute_reference(src_base_address, dst_base_address, rc) bind(C, name="ESMC_InfoCopyForAttributeReference")
     use iso_c_binding
     implicit none
-    integer(C_LONG) :: src_base_address
-    integer(C_LONG) :: dst_base_address
+    integer(C_LONG_LONG) :: src_base_address
+    integer(C_LONG_LONG) :: dst_base_address
     integer(C_INT), intent(out) :: rc
   end subroutine
   
@@ -205,7 +205,7 @@ interface
     implicit none
     type(C_PTR), value :: inqstate
     integer(C_INT), intent(in) :: rootPet
-    integer(C_LONG), intent(in) :: vmAddress
+    integer(C_LONG_LONG), intent(in) :: vmAddress
     integer(C_INT), intent(in) :: markClean
     integer(C_INT), intent(out) :: rc
   end subroutine
diff --git a/src/Infrastructure/Base/interface/ESMF_InfoCDefGeneric.F90 b/src/Infrastructure/Base/interface/ESMF_InfoCDefGeneric.F90
index 41f831287e..1beb4d21de 100644
--- a/src/Infrastructure/Base/interface/ESMF_InfoCDefGeneric.F90
+++ b/src/Infrastructure/Base/interface/ESMF_InfoCDefGeneric.F90
@@ -62,7 +62,7 @@ interface
     implicit none
     type(C_PTR), value :: info
     character(C_CHAR), intent(in) :: key(*)
-    integer(C_LONG), intent(out) :: value
+    integer(C_LONG_LONG), intent(out) :: value
     integer(C_INT), intent(inout) :: rc
     type(C_PTR), value :: default, idx
     integer(C_INT), intent(in) :: recursive
@@ -123,7 +123,7 @@ interface
     implicit none
     type(C_PTR), value :: info
     character(C_CHAR), intent(in) :: key(*)
-    integer(C_LONG), dimension(*), intent(out) :: value
+    integer(C_LONG_LONG), dimension(*), intent(out) :: value
     integer(C_INT), intent(out) :: itemcount
     integer(C_INT), intent(inout) :: rc
     integer(C_INT), intent(in) :: recursive
@@ -189,7 +189,7 @@ interface
     implicit none
     type(C_PTR), value :: info
     character(kind=C_CHAR), intent(in) :: key(*)
-    integer(C_LONG), intent(in) :: value
+    integer(C_LONG_LONG), intent(in) :: value
     logical(C_BOOL), intent(in) :: force
     integer(C_INT), intent(inout) :: rc
     type(C_PTR), value :: idx
@@ -261,7 +261,7 @@ interface
     implicit none
     type(C_PTR), value :: info
     character(kind=C_CHAR), intent(in) :: key(*)
-    integer(C_LONG), dimension(*), intent(in) :: value
+    integer(C_LONG_LONG), dimension(*), intent(in) :: value
     integer(C_INT), intent(in) :: itemcount
     logical(C_BOOL), intent(in) :: force
     integer(C_INT), intent(inout) :: rc
diff --git a/src/Infrastructure/Base/src/ESMCI_Info.C b/src/Infrastructure/Base/src/ESMCI_Info.C
index 7ccdcf8cee..a5e0b9b8d1 100644
--- a/src/Infrastructure/Base/src/ESMCI_Info.C
+++ b/src/Infrastructure/Base/src/ESMCI_Info.C
@@ -840,6 +840,7 @@ template float Info::get(key_t&, const float*, const int*, bool, std::string*, b
 template double Info::get(key_t&, const double*, const int*, bool, std::string*, bool) const;
 template int Info::get(key_t&, const int*, const int*, bool, std::string*, bool) const;
 template long int Info::get(key_t&, const long int*, const int*, bool, std::string*, bool) const;
+template long long Info::get(key_t&, const long long*, const int*, bool, std::string*, bool) const;
 template bool Info::get(key_t&, const bool*, const int*, bool, std::string*, bool) const;
 template std::string Info::get(key_t&, const std::string*, const int*, bool, std::string*, bool) const;
 template json Info::get(key_t&, const json*, const int*, bool, std::string*, bool) const;
@@ -1389,6 +1390,7 @@ template void Info::set<float>(key_t&, float, bool, const int*, const key_t * co
 template void Info::set<double>(key_t&, double, bool, const int*, const key_t * const);
 template void Info::set<int>(key_t&, int, bool, const int*, const key_t * const);
 template void Info::set<long int>(key_t&, long int, bool, const int*, const key_t * const);
+template void Info::set<long long>(key_t&, long long, bool, const int*, const key_t * const);
 template void Info::set<std::string>(key_t&, std::string, bool, const int*, const key_t * const);
 template void Info::set<bool>(key_t&, bool, bool, const int*, const key_t * const);
 
@@ -1421,6 +1423,7 @@ template void Info::set<float>(key_t&, float*, int, bool, const key_t * const);
 template void Info::set<double>(key_t&, double*, int, bool, const key_t * const);
 template void Info::set<int>(key_t&, int*, int, bool, const key_t * const);
 template void Info::set<long int>(key_t&, long int*, int, bool, const key_t * const);
+template void Info::set<long long>(key_t&, long long*, int, bool, const key_t * const);
 template void Info::set<bool>(key_t&, bool*, int, bool, const key_t * const);
 template void Info::set<std::vector<std::string>>(key_t&, std::vector<std::string>*, int, bool, const key_t * const);
 
diff --git a/src/Infrastructure/Base/src/ESMC_InfoCDefGeneric.C b/src/Infrastructure/Base/src/ESMC_InfoCDefGeneric.C
index 437553a364..b94ff66d33 100644
--- a/src/Infrastructure/Base/src/ESMC_InfoCDefGeneric.C
+++ b/src/Infrastructure/Base/src/ESMC_InfoCDefGeneric.C
@@ -102,13 +102,13 @@ void ESMC_InfoGetI4(ESMCI::Info *info, char *key, int &value, int &esmc_rc, int
 
 #undef  ESMC_METHOD
 #define ESMC_METHOD "ESMC_InfoGetI8()"
-void ESMC_InfoGetI8(ESMCI::Info *info, char *key, long int &value, int &esmc_rc, long int *def, int *index, int &fortran_bool_recursive) {
+void ESMC_InfoGetI8(ESMCI::Info *info, char *key, long long &value, int &esmc_rc, long long *def, int *index, int &fortran_bool_recursive) {
   ESMC_CHECK_INIT(info, esmc_rc)
   esmc_rc = ESMF_FAILURE;
   try {
     std::string local_key(key);
     bool recursive = fortran_bool_recursive == 1;
-    value = info->get<long int>(local_key, def, index, recursive, nullptr, false);
+    value = info->get<long long>(local_key, def, index, recursive, nullptr, false);
     esmc_rc = ESMF_SUCCESS;
   }
   ESMC_CATCH_ISOC
@@ -253,7 +253,7 @@ void ESMC_InfoGetArrayI4(ESMCI::Info *info, char *key, int *value, int &count, i
 
 #undef  ESMC_METHOD
 #define ESMC_METHOD "ESMC_InfoGetArrayI8()"
-void ESMC_InfoGetArrayI8(ESMCI::Info *info, char *key, long int *value, int &count, int &esmc_rc, int &fortran_bool_recursive, bool &fortran_bool_scalarToArray, int &expected_size) {
+void ESMC_InfoGetArrayI8(ESMCI::Info *info, char *key, long long *value, int &count, int &esmc_rc, int &fortran_bool_recursive, bool &fortran_bool_scalarToArray, int &expected_size) {
   ESMC_CHECK_INIT(info, esmc_rc)
   esmc_rc = ESMF_FAILURE;
   try {
@@ -285,7 +285,7 @@ void ESMC_InfoGetArrayI8(ESMCI::Info *info, char *key, long int *value, int &cou
         ESMC_CATCH_ERRPASSTHRU
       }
     } else {
-      value[0] = info->get<long int>(local_key, nullptr, nullptr, recursive, nullptr, false);
+      value[0] = info->get<long long>(local_key, nullptr, nullptr, recursive, nullptr, false);
     }
     esmc_rc = ESMF_SUCCESS;
   }
@@ -389,7 +389,7 @@ void ESMC_InfoSetI4(ESMCI::Info *info, char *key, int &value, bool &force, int &
 
 #undef  ESMC_METHOD
 #define ESMC_METHOD "ESMC_InfoSetI8()"
-void ESMC_InfoSetI8(ESMCI::Info *info, char *key, long int &value, bool &force, int &esmc_rc, int *index, char *pkey) {
+void ESMC_InfoSetI8(ESMCI::Info *info, char *key, long long &value, bool &force, int &esmc_rc, int *index, char *pkey) {
   ESMC_CHECK_INIT(info, esmc_rc)
   esmc_rc = ESMF_FAILURE;
   try {
@@ -397,7 +397,7 @@ void ESMC_InfoSetI8(ESMCI::Info *info, char *key, long int &value, bool &force,
     std::string local_pkey(pkey);
     std::string *local_pkeyp = nullptr;
     if (local_pkey.size() != 0) {local_pkeyp = &local_pkey;}
-    info->set<long int>(local_key, value, force, index, local_pkeyp);
+    info->set<long long>(local_key, value, force, index, local_pkeyp);
     esmc_rc = ESMF_SUCCESS;
   }
   ESMC_CATCH_ISOC
@@ -471,7 +471,7 @@ void ESMC_InfoSetArrayI4(ESMCI::Info *info, char *key, int *value, int &count, b
 
 #undef  ESMC_METHOD
 #define ESMC_METHOD "ESMC_InfoSetArrayI8()"
-void ESMC_InfoSetArrayI8(ESMCI::Info *info, char *key, long int *value, int &count, bool &force, int &esmc_rc, char *pkey) {
+void ESMC_InfoSetArrayI8(ESMCI::Info *info, char *key, long long *value, int &count, bool &force, int &esmc_rc, char *pkey) {
   ESMC_CHECK_INIT(info, esmc_rc)
   esmc_rc = ESMF_FAILURE;
   try {
@@ -479,7 +479,7 @@ void ESMC_InfoSetArrayI8(ESMCI::Info *info, char *key, long int *value, int &cou
     std::string local_pkey(pkey);
     std::string *local_pkeyp = nullptr;
     if (local_pkey.size() != 0) {local_pkeyp = &local_pkey;}
-    info->set<long int>(local_key, value, count, force, local_pkeyp);
+    info->set<long long>(local_key, value, count, force, local_pkeyp);
     esmc_rc = ESMF_SUCCESS;
   }
   ESMC_CATCH_ISOC
diff --git a/src/Infrastructure/stubs/mpiuni/mpi.h b/src/Infrastructure/stubs/mpiuni/mpi.h
index 1f819244dd..58210d11cc 100644
--- a/src/Infrastructure/stubs/mpiuni/mpi.h
+++ b/src/Infrastructure/stubs/mpiuni/mpi.h
@@ -146,7 +146,7 @@ extern int MPIUNI_Memcpy(void*,const void*,int);
 #define MPI_UNDEFINED    678
 #define MPI_MAX_PROCESSOR_NAME 512
 #define MPI_MAX_ERROR_STRING 512
-typedef long MPI_Aint;
+typedef long long MPI_Aint;
 
 /* for moab to build in mpiuni mode */
 #define MPI_Fint  int
@@ -218,240 +218,240 @@ extern double ESMC_MPI_Wtime(void);
 */
 
 #define MPI_Init(argc,argv) \
-     (MPIUNI_TMP = (void*)(long) (argc),\
-      MPIUNI_TMP = (void*)(long) (argv),\
+     (MPIUNI_TMP = (void*)(MPI_Aint) (argc),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (argv),\
       MPI_SUCCESS)
 #define MPI_Init_thread(argc,argv,required,provided) \
-     (MPIUNI_TMP = (void*)(long) (argc),\
-      MPIUNI_TMP = (void*)(long) (argv),\
-      MPIUNI_TMP = (void*)(long) (required),\
-      MPIUNI_TMP = (void*)(long) (provided),\
+     (MPIUNI_TMP = (void*)(MPI_Aint) (argc),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (argv),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (required),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (provided),\
       MPI_SUCCESS)
 #define MPI_Send(buf,count,datatype,dest,tag,comm)  \
-     (MPIUNI_TMP = (void*)(long) (buf),\
-      MPIUNI_TMP = (void*)(long) (count),\
-      MPIUNI_TMP = (void*)(long) (datatype),\
-      MPIUNI_TMP = (void*)(long) (dest),\
-      MPIUNI_TMP = (void*)(long) (tag),\
-      MPIUNI_TMP = (void*)(long) (comm),\
+     (MPIUNI_TMP = (void*)(MPI_Aint) (buf),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (count),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (datatype),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (dest),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (tag),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (comm),\
       MPI_SUCCESS)
 #define MPI_Recv(buf,count,datatype,source,tag,comm,status) \
-     (MPIUNI_TMP = (void*)(long) (buf),\
-      MPIUNI_TMP = (void*)(long) (count),\
-      MPIUNI_TMP = (void*)(long) (datatype),\
-      MPIUNI_TMP = (void*)(long) (source),\
-      MPIUNI_TMP = (void*)(long) (tag),\
-      MPIUNI_TMP = (void*)(long) (comm),\
-      MPIUNI_TMP = (void*)(long) (status),\
+     (MPIUNI_TMP = (void*)(MPI_Aint) (buf),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (count),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (datatype),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (source),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (tag),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (comm),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (status),\
       MPI_Abort(MPI_COMM_WORLD,0))
 #define MPI_Get_count(status, datatype,count) \
-     (MPIUNI_TMP = (void*)(long) (status),\
-      MPIUNI_TMP = (void*)(long) (datatype),\
-      MPIUNI_TMP = (void*)(long) (count),\
+     (MPIUNI_TMP = (void*)(MPI_Aint) (status),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (datatype),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (count),\
       MPI_Abort(MPI_COMM_WORLD,0))
 #define MPI_Bsend(buf,count,datatype,dest,tag,comm)  \
-     (MPIUNI_TMP = (void*)(long) (buf),\
-      MPIUNI_TMP = (void*)(long) (count),\
-      MPIUNI_TMP = (void*)(long) (datatype),\
-      MPIUNI_TMP = (void*)(long) (dest),\
-      MPIUNI_TMP = (void*)(long) (tag),\
-      MPIUNI_TMP = (void*)(long) (comm),\
+     (MPIUNI_TMP = (void*)(MPI_Aint) (buf),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (count),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (datatype),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (dest),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (tag),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (comm),\
       MPI_SUCCESS)
 #define MPI_Ssend(buf,count, datatype,dest,tag,comm) \
-     (MPIUNI_TMP = (void*)(long) (buf),\
-      MPIUNI_TMP = (void*)(long) (count),\
-      MPIUNI_TMP = (void*)(long) (datatype),\
-      MPIUNI_TMP = (void*)(long) (dest),\
-      MPIUNI_TMP = (void*)(long) (tag),\
-      MPIUNI_TMP = (void*)(long) (comm),\
+     (MPIUNI_TMP = (void*)(MPI_Aint) (buf),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (count),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (datatype),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (dest),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (tag),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (comm),\
       MPI_SUCCESS)
 #define MPI_Rsend(buf,count, datatype,dest,tag,comm) \
-     (MPIUNI_TMP = (void*)(long) (buf),\
-      MPIUNI_TMP = (void*)(long) (count),\
-      MPIUNI_TMP = (void*)(long) (datatype),\
-      MPIUNI_TMP = (void*)(long) (dest),\
-      MPIUNI_TMP = (void*)(long) (tag),\
-      MPIUNI_TMP = (void*)(long) (comm),\
+     (MPIUNI_TMP = (void*)(MPI_Aint) (buf),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (count),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (datatype),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (dest),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (tag),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (comm),\
       MPI_SUCCESS)
 #define MPI_Buffer_attach(buffer,size) \
-     (MPIUNI_TMP = (void*)(long) (buffer),\
-      MPIUNI_TMP = (void*)(long) (size),\
+     (MPIUNI_TMP = (void*)(MPI_Aint) (buffer),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (size),\
       MPI_SUCCESS)
 #define MPI_Buffer_detach(buffer,size)\
-     (MPIUNI_TMP = (void*)(long) (buffer),\
-      MPIUNI_TMP = (void*)(long) (size),\
+     (MPIUNI_TMP = (void*)(MPI_Aint) (buffer),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (size),\
       MPI_SUCCESS)
 #define MPI_Ibsend(buf,count, datatype,dest,tag,comm,request) \
-     (MPIUNI_TMP = (void*)(long) (buf),\
-       MPIUNI_TMP = (void*)(long) (count),\
-       MPIUNI_TMP = (void*)(long) (datatype),\
-       MPIUNI_TMP = (void*)(long) (dest),\
-       MPIUNI_TMP = (void*)(long) (tag),\
-       MPIUNI_TMP = (void*)(long) (comm),\
-       MPIUNI_TMP = (void*)(long) (request),\
+     (MPIUNI_TMP = (void*)(MPI_Aint) (buf),\
+       MPIUNI_TMP = (void*)(MPI_Aint) (count),\
+       MPIUNI_TMP = (void*)(MPI_Aint) (datatype),\
+       MPIUNI_TMP = (void*)(MPI_Aint) (dest),\
+       MPIUNI_TMP = (void*)(MPI_Aint) (tag),\
+       MPIUNI_TMP = (void*)(MPI_Aint) (comm),\
+       MPIUNI_TMP = (void*)(MPI_Aint) (request),\
        MPI_SUCCESS)
 #define MPI_Issend(buf,count, datatype,dest,tag,comm,request) \
-     (MPIUNI_TMP = (void*)(long) (buf),\
-      MPIUNI_TMP = (void*)(long) (count),\
-      MPIUNI_TMP = (void*)(long) (datatype),\
-      MPIUNI_TMP = (void*)(long) (dest),\
-      MPIUNI_TMP = (void*)(long) (tag),\
-      MPIUNI_TMP = (void*)(long) (comm),\
-      MPIUNI_TMP = (void*)(long) (request),\
+     (MPIUNI_TMP = (void*)(MPI_Aint) (buf),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (count),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (datatype),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (dest),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (tag),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (comm),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (request),\
       MPI_SUCCESS)
 #define MPI_Irsend(buf,count, datatype,dest,tag,comm,request) \
-     (MPIUNI_TMP = (void*)(long) (buf),\
-      MPIUNI_TMP = (void*)(long) (count),\
-      MPIUNI_TMP = (void*)(long) (datatype),\
-      MPIUNI_TMP = (void*)(long) (dest),\
-      MPIUNI_TMP = (void*)(long) (tag),\
-      MPIUNI_TMP = (void*)(long) (comm),\
-      MPIUNI_TMP = (void*)(long) (request),\
+     (MPIUNI_TMP = (void*)(MPI_Aint) (buf),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (count),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (datatype),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (dest),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (tag),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (comm),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (request),\
       MPI_SUCCESS)
 #define MPI_Irecv(buf,count, datatype,source,tag,comm,request) \
-     (MPIUNI_TMP = (void*)(long) (buf),\
-      MPIUNI_TMP = (void*)(long) (count),\
-      MPIUNI_TMP = (void*)(long) (datatype),\
-      MPIUNI_TMP = (void*)(long) (source),\
-      MPIUNI_TMP = (void*)(long) (tag),\
-      MPIUNI_TMP = (void*)(long) (comm),\
-      MPIUNI_TMP = (void*)(long) (request),\
+     (MPIUNI_TMP = (void*)(MPI_Aint) (buf),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (count),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (datatype),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (source),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (tag),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (comm),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (request),\
       MPI_Abort(MPI_COMM_WORLD,0))
 #define MPI_Isend(buf,count, datatype,dest,tag,comm,request) \
-     (MPIUNI_TMP = (void*)(long) (buf),\
-      MPIUNI_TMP = (void*)(long) (count),\
-      MPIUNI_TMP = (void*)(long) (datatype),\
-      MPIUNI_TMP = (void*)(long) (dest),\
-      MPIUNI_TMP = (void*)(long) (tag),\
-      MPIUNI_TMP = (void*)(long) (comm),\
-      MPIUNI_TMP = (void*)(long) (request),\
+     (MPIUNI_TMP = (void*)(MPI_Aint) (buf),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (count),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (datatype),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (dest),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (tag),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (comm),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (request),\
       MPI_Abort(MPI_COMM_WORLD,0))
 #define MPI_Wait(request,status) \
-     (MPIUNI_TMP = (void*)(long) (request),\
-      MPIUNI_TMP = (void*)(long) (status),\
+     (MPIUNI_TMP = (void*)(MPI_Aint) (request),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (status),\
       MPI_SUCCESS)
 #define MPI_Test(request,flag,status) \
-     (MPIUNI_TMP = (void*)(long) (request),\
-      MPIUNI_TMP = (void*)(long) (status),\
+     (MPIUNI_TMP = (void*)(MPI_Aint) (request),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (status),\
       *(flag) = 0, \
       MPI_SUCCESS)
 #define MPI_Request_free(request) \
-     (MPIUNI_TMP = (void*)(long) (request),\
+     (MPIUNI_TMP = (void*)(MPI_Aint) (request),\
       MPI_SUCCESS)
 #define MPI_Waitany(a,b,c,d) \
-     (MPIUNI_TMP = (void*)(long) (a),\
-      MPIUNI_TMP = (void*)(long) (b),\
-      MPIUNI_TMP = (void*)(long) (c),\
-      MPIUNI_TMP = (void*)(long) (d),\
+     (MPIUNI_TMP = (void*)(MPI_Aint) (a),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (b),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (c),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (d),\
       MPI_SUCCESS)
 #define MPI_Testany(a,b,c,d,e) \
-     (MPIUNI_TMP = (void*)(long) (a),\
-      MPIUNI_TMP = (void*)(long) (b),\
-      MPIUNI_TMP = (void*)(long) (c),\
-      MPIUNI_TMP = (void*)(long) (d),\
-      MPIUNI_TMP = (void*)(long) (e),\
+     (MPIUNI_TMP = (void*)(MPI_Aint) (a),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (b),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (c),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (d),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (e),\
       MPI_SUCCESS)
 #define MPI_Waitall(count,array_of_requests,array_of_statuses) \
-     (MPIUNI_TMP = (void*)(long) (count),\
-      MPIUNI_TMP = (void*)(long) (array_of_requests),\
-      MPIUNI_TMP = (void*)(long) (array_of_statuses),\
+     (MPIUNI_TMP = (void*)(MPI_Aint) (count),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (array_of_requests),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (array_of_statuses),\
       MPI_SUCCESS)
 #define MPI_Testall(count,array_of_requests,flag,array_of_statuses) \
-     (MPIUNI_TMP = (void*)(long) (count),\
-      MPIUNI_TMP = (void*)(long) (array_of_requests),\
-      MPIUNI_TMP = (void*)(long) (flag),\
-      MPIUNI_TMP = (void*)(long) (array_of_statuses),\
+     (MPIUNI_TMP = (void*)(MPI_Aint) (count),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (array_of_requests),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (flag),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (array_of_statuses),\
       MPI_SUCCESS)
 #define MPI_Waitsome(incount,array_of_requests,outcount,\
                      array_of_indices,array_of_statuses) \
-     (MPIUNI_TMP = (void*)(long) (incount),\
-      MPIUNI_TMP = (void*)(long) (array_of_requests),\
-      MPIUNI_TMP = (void*)(long) (outcount),\
-      MPIUNI_TMP = (void*)(long) (array_of_indices),\
-      MPIUNI_TMP = (void*)(long) (array_of_statuses),\
+     (MPIUNI_TMP = (void*)(MPI_Aint) (incount),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (array_of_requests),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (outcount),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (array_of_indices),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (array_of_statuses),\
       MPI_SUCCESS)
 #define MPI_Comm_group(comm,group) \
-     (MPIUNI_TMP = (void*)(long) (comm),\
-      MPIUNI_TMP = (void*)(long) (group),\
+     (MPIUNI_TMP = (void*)(MPI_Aint) (comm),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (group),\
       MPI_SUCCESS)
 #define MPI_Group_incl(group,n,ranks,newgroup) \
-     (MPIUNI_TMP = (void*)(long) (group),\
-      MPIUNI_TMP = (void*)(long) (n),\
-      MPIUNI_TMP = (void*)(long) (ranks),\
-      MPIUNI_TMP = (void*)(long) (newgroup),\
+     (MPIUNI_TMP = (void*)(MPI_Aint) (group),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (n),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (ranks),\
+      MPIUNI_TMP = (void*)(MPI_Aint) (newgroup),\
       MPI_SUCCESS)
 #define MPI_Testsome(incount,array_of_requests,outcount,\
                      array_of_indices,array_of_statuses) MPI_SUCCESS
 #define MPI_Iprobe(source,tag,comm,flag,status) (*(flag)=0, MPI_SUCCESS)
 #define MPI_Probe(source,tag,comm,status) MPI_SUCCESS
-#define MPI_Cancel(request) (MPIUNI_TMP = (void*)(long) (request),MPI_SUCCESS)
+#define MPI_Cancel(request) (MPIUNI_TMP = (void*)(MPI_Aint) (request),MPI_SUCCESS)
 #define MPI_Test_cancelled(status,flag) (*(flag)=0,MPI_SUCCESS)
 #define MPI_Send_init(buf,count, datatype,dest,tag,comm,request) \
-     (MPIUNI_TMP = (void*)(long) (buf),\
-     MPIUNI_TMP = (void*)(long) (count),\
-     MPIUNI_TMP = (void*)(long) (datatype),\
-     MPIUNI_TMP = (void*)(long) (dest),\
-     MPIUNI_TMP = (void*)(long) (tag),\
-     MPIUNI_TMP = (void*)(long) (comm),\
-     MPIUNI_TMP = (void*)(long) (request),\
+     (MPIUNI_TMP = (void*)(MPI_Aint) (buf),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (count),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (datatype),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (dest),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (tag),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (comm),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (request),\
      MPI_SUCCESS)
 #define MPI_Bsend_init(buf,count, datatype,dest,tag,comm,request) \
-     (MPIUNI_TMP = (void*)(long) (buf),\
-     MPIUNI_TMP = (void*)(long) (count),\
-     MPIUNI_TMP = (void*)(long) (datatype),\
-     MPIUNI_TMP = (void*)(long) (dest),\
-     MPIUNI_TMP = (void*)(long) (tag),\
-     MPIUNI_TMP = (void*)(long) (comm),\
-     MPIUNI_TMP = (void*)(long) (request),\
+     (MPIUNI_TMP = (void*)(MPI_Aint) (buf),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (count),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (datatype),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (dest),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (tag),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (comm),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (request),\
      MPI_SUCCESS)
 #define MPI_Ssend_init(buf,count, datatype,dest,tag,comm,request) \
-     (MPIUNI_TMP = (void*)(long) (buf),\
-     MPIUNI_TMP = (void*)(long) (count),\
-     MPIUNI_TMP = (void*)(long) (datatype),\
-     MPIUNI_TMP = (void*)(long) (dest),\
-     MPIUNI_TMP = (void*)(long) (tag),\
-     MPIUNI_TMP = (void*)(long) (comm),\
-     MPIUNI_TMP = (void*)(long) (request),\
+     (MPIUNI_TMP = (void*)(MPI_Aint) (buf),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (count),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (datatype),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (dest),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (tag),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (comm),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (request),\
      MPI_SUCCESS)
 #define MPI_Bsend_init(buf,count, datatype,dest,tag,comm,request) \
-     (MPIUNI_TMP = (void*)(long) (buf),\
-     MPIUNI_TMP = (void*)(long) (count),\
-     MPIUNI_TMP = (void*)(long) (datatype),\
-     MPIUNI_TMP = (void*)(long) (dest),\
-     MPIUNI_TMP = (void*)(long) (tag),\
-     MPIUNI_TMP = (void*)(long) (comm),\
-     MPIUNI_TMP = (void*)(long) (request),\
+     (MPIUNI_TMP = (void*)(MPI_Aint) (buf),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (count),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (datatype),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (dest),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (tag),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (comm),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (request),\
      MPI_SUCCESS)
 #define MPI_Rsend_init(buf,count, datatype,dest,tag,comm,request) \
-     (MPIUNI_TMP = (void*)(long) (buf),\
-     MPIUNI_TMP = (void*)(long) (count),\
-     MPIUNI_TMP = (void*)(long) (datatype),\
-     MPIUNI_TMP = (void*)(long) (dest),\
-     MPIUNI_TMP = (void*)(long) (tag),\
-     MPIUNI_TMP = (void*)(long) (comm),\
-     MPIUNI_TMP = (void*)(long) (request),\
+     (MPIUNI_TMP = (void*)(MPI_Aint) (buf),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (count),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (datatype),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (dest),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (tag),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (comm),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (request),\
      MPI_SUCCESS)
 #define MPI_Recv_init(buf,count, datatype,source,tag,comm,request) \
-     (MPIUNI_TMP = (void*)(long) (buf),\
-     MPIUNI_TMP = (void*)(long) (count),\
-     MPIUNI_TMP = (void*)(long) (datatype),\
-     MPIUNI_TMP = (void*)(long) (source),\
-     MPIUNI_TMP = (void*)(long) (tag),\
-     MPIUNI_TMP = (void*)(long) (comm),\
-     MPIUNI_TMP = (void*)(long) (request),\
+     (MPIUNI_TMP = (void*)(MPI_Aint) (buf),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (count),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (datatype),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (source),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (tag),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (comm),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (request),\
      MPI_SUCCESS)
-#define MPI_Start(request) (MPIUNI_TMP = (void*)(long) (request),MPI_SUCCESS)
+#define MPI_Start(request) (MPIUNI_TMP = (void*)(MPI_Aint) (request),MPI_SUCCESS)
 #define MPI_Startall(count,array_of_requests) \
-     (MPIUNI_TMP = (void*)(long) (count),\
-     MPIUNI_TMP = (void*)(long) (array_of_requests),\
+     (MPIUNI_TMP = (void*)(MPI_Aint) (count),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (array_of_requests),\
      MPI_SUCCESS)
 #define MPI_Op_create(function,commute,op) \
-     (MPIUNI_TMP = (void*)(long) (function),\
-     MPIUNI_TMP = (void*)(long) (commute),\
-     MPIUNI_TMP = (void*)(long) (op),\
+     (MPIUNI_TMP = (void*)(MPI_Aint) (function),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (commute),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (op),\
      MPI_SUCCESS)
 #define MPI_Op_free(op) \
-     (MPIUNI_TMP = (void*)(long) (op),\
+     (MPIUNI_TMP = (void*)(MPI_Aint) (op),\
      MPI_SUCCESS)
      /* Need to determine sizeof "sendtype" */
 #define MPI_Sendrecv(sendbuf,sendcount, sendtype,\
@@ -475,7 +475,7 @@ extern double ESMC_MPI_Wtime(void);
      array_of_displacements,\
      array_of_types, newtype) MPI_SUCCESS
 #define MPI_Address(location,address) \
-     (*(address) = (long)(char *)(location),MPI_SUCCESS)
+     (*(address) = (MPI_Aint)(char *)(location),MPI_SUCCESS)
 #define MPI_Type_extent(datatype,extent) \
      MPI_Abort(MPI_COMM_WORLD,0)
 #define MPI_Type_size(datatype,size) \
@@ -484,7 +484,7 @@ extern double ESMC_MPI_Wtime(void);
      MPI_Abort(MPI_COMM_WORLD,0)
 #define MPI_Type_ub(datatype,displacement) \
      MPI_Abort(MPI_COMM_WORLD,0)
-#define MPI_Type_commit(datatype) (MPIUNI_TMP = (void*)(long) (datatype),\
+#define MPI_Type_commit(datatype) (MPIUNI_TMP = (void*)(MPI_Aint) (datatype),\
      MPI_SUCCESS)
 #define MPI_Type_free(datatype) MPI_SUCCESS
 #define MPI_Get_elements(status, datatype,count) \
@@ -498,69 +498,69 @@ extern double ESMC_MPI_Wtime(void);
 #define MPI_Pack_size(incount, datatype,comm,size) \
      MPI_Abort(MPI_COMM_WORLD,0)
 #define MPI_Barrier(comm) \
-     (MPIUNI_TMP = (void*)(long) (comm),\
+     (MPIUNI_TMP = (void*)(MPI_Aint) (comm),\
      MPI_SUCCESS)
 #define MPI_Bcast(buffer,count,datatype,root,comm) \
-     (MPIUNI_TMP = (void*)(long) (buffer),\
-     MPIUNI_TMP = (void*)(long) (count),\
-     MPIUNI_TMP = (void*)(long) (datatype),\
-     MPIUNI_TMP = (void*)(long) (comm),\
+     (MPIUNI_TMP = (void*)(MPI_Aint) (buffer),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (count),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (datatype),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (comm),\
      MPI_SUCCESS)
 #define MPI_Gather(sendbuf,sendcount, sendtype,\
      recvbuf,recvcount, recvtype,\
      root,comm) \
-     (MPIUNI_TMP = (void*)(long) (recvcount),\
-     MPIUNI_TMP = (void*)(long) (root),\
-     MPIUNI_TMP = (void*)(long) (recvtype),\
-     MPIUNI_TMP = (void*)(long) (comm),\
+     (MPIUNI_TMP = (void*)(MPI_Aint) (recvcount),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (root),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (recvtype),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (comm),\
      MPIUNI_Memcpy(recvbuf,sendbuf,(sendcount)* (sendtype)),\
      MPI_SUCCESS)
 #define MPI_Gatherv(sendbuf,sendcount, sendtype,\
      recvbuf,recvcounts,displs,\
      recvtype,root,comm) \
-     (MPIUNI_TMP = (void*)(long) (recvcounts),\
-     MPIUNI_TMP = (void*)(long) (displs),\
-     MPIUNI_TMP = (void*)(long) (recvtype),\
-     MPIUNI_TMP = (void*)(long) (root),\
-     MPIUNI_TMP = (void*)(long) (comm),\
+     (MPIUNI_TMP = (void*)(MPI_Aint) (recvcounts),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (displs),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (recvtype),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (root),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (comm),\
      MPIUNI_Memcpy(recvbuf,sendbuf,(sendcount)* (sendtype)),\
      MPI_SUCCESS)
 #define MPI_Scatter(sendbuf,sendcount, sendtype,\
      recvbuf,recvcount, recvtype,\
      root,comm) \
-     (MPIUNI_TMP = (void*)(long) (sendbuf),\
-     MPIUNI_TMP = (void*)(long) (sendcount),\
-     MPIUNI_TMP = (void*)(long) (sendtype),\
-     MPIUNI_TMP = (void*)(long) (recvbuf),\
-     MPIUNI_TMP = (void*)(long) (recvcount),\
-     MPIUNI_TMP = (void*)(long) (recvtype),\
-     MPIUNI_TMP = (void*)(long) (root),\
-     MPIUNI_TMP = (void*)(long) (comm),MPI_Abort(MPI_COMM_WORLD,0))
+     (MPIUNI_TMP = (void*)(MPI_Aint) (sendbuf),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (sendcount),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (sendtype),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (recvbuf),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (recvcount),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (recvtype),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (root),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (comm),MPI_Abort(MPI_COMM_WORLD,0))
 #define MPI_Scatterv(sendbuf,sendcounts,displs,\
      sendtype, recvbuf,recvcount,\
      recvtype,root,comm) \
-     (MPIUNI_TMP = (void*)(long) (sendbuf),\
-     MPIUNI_TMP = (void*)(long) (sendcounts),\
-     MPIUNI_TMP = (void*)(long) (displs),\
-     MPIUNI_TMP = (void*)(long) (sendtype),\
-     MPIUNI_TMP = (void*)(long) (recvbuf),\
-     MPIUNI_TMP = (void*)(long) (recvcount),\
-     MPIUNI_TMP = (void*)(long) (recvtype),\
-     MPIUNI_TMP = (void*)(long) (root),\
-     MPIUNI_TMP = (void*)(long) (comm),MPI_Abort(MPI_COMM_WORLD,0))
+     (MPIUNI_TMP = (void*)(MPI_Aint) (sendbuf),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (sendcounts),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (displs),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (sendtype),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (recvbuf),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (recvcount),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (recvtype),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (root),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (comm),MPI_Abort(MPI_COMM_WORLD,0))
 #define MPI_Allgather(sendbuf,sendcount, sendtype,\
      recvbuf,recvcount, recvtype,comm) \
-     (MPIUNI_TMP = (void*)(long) (recvcount),\
-     MPIUNI_TMP = (void*)(long) (recvtype),\
-     MPIUNI_TMP = (void*)(long) (comm),\
+     (MPIUNI_TMP = (void*)(MPI_Aint) (recvcount),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (recvtype),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (comm),\
      MPIUNI_Memcpy(recvbuf,sendbuf,(sendcount)* (sendtype)),\
      MPI_SUCCESS)
 #define MPI_Allgatherv(sendbuf,sendcount, sendtype,\
      recvbuf,recvcounts,displs,recvtype,comm) \
-     (MPIUNI_TMP = (void*)(long) (recvcounts),\
-     MPIUNI_TMP = (void*)(long) (displs),\
-     MPIUNI_TMP = (void*)(long) (recvtype),\
-     MPIUNI_TMP = (void*)(long) (comm),\
+     (MPIUNI_TMP = (void*)(MPI_Aint) (recvcounts),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (displs),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (recvtype),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (comm),\
      MPIUNI_Memcpy(recvbuf,sendbuf,(sendcount)* (sendtype)),\
      MPI_SUCCESS)
 #define MPI_Alltoall(sendbuf,sendcount, sendtype,\
@@ -572,13 +572,13 @@ extern double ESMC_MPI_Wtime(void);
 #define MPI_Reduce(sendbuf, recvbuf,count,\
      datatype,op,root,comm) \
      (MPIUNI_Memcpy(recvbuf,sendbuf,(count)*(datatype)),\
-     MPIUNI_TMP = (void*)(long) (comm),MPI_SUCCESS)
+     MPIUNI_TMP = (void*)(MPI_Aint) (comm),MPI_SUCCESS)
 #define MPI_Allreduce(sendbuf, recvbuf,count,datatype,op,comm) \
      (MPIUNI_Memcpy(recvbuf,sendbuf,(count)*(datatype)),\
-     MPIUNI_TMP = (void*)(long) (comm),MPI_SUCCESS)
+     MPIUNI_TMP = (void*)(MPI_Aint) (comm),MPI_SUCCESS)
 #define MPI_Scan(sendbuf, recvbuf,count,datatype,op,comm) \
      (MPIUNI_Memcpy(recvbuf,sendbuf,(count)*(datatype)),\
-     MPIUNI_TMP = (void*)(long) (comm),MPI_SUCCESS)
+     MPIUNI_TMP = (void*)(MPI_Aint) (comm),MPI_SUCCESS)
 #define MPI_Reduce_scatter(sendbuf, recvbuf,recvcounts,\
      datatype,op,comm) \
      MPI_Abort(MPI_COMM_WORLD,0)
@@ -595,28 +595,28 @@ extern double ESMC_MPI_Wtime(void);
 #define MPI_Group_range_incl(group,n,ranges,newgroup) MPI_SUCCESS
 #define MPI_Group_range_excl(group,n,ranges,newgroup) MPI_SUCCESS
 #define MPI_Group_free(group) \
-     (MPIUNI_TMP = (void*)(long) (group),\
+     (MPIUNI_TMP = (void*)(MPI_Aint) (group),\
      MPI_SUCCESS)
 #define MPI_Comm_size(comm,size) \
-     (MPIUNI_TMP = (void*)(long) (comm),\
+     (MPIUNI_TMP = (void*)(MPI_Aint) (comm),\
      *(size)=1,\
      MPI_SUCCESS)
 #define MPI_Comm_rank(comm,rank) \
-     (MPIUNI_TMP = (void*)(long) (comm),\
+     (MPIUNI_TMP = (void*)(MPI_Aint) (comm),\
      *(rank)=0,\
      MPI_SUCCESS)
 #define MPI_Comm_compare(comm1,comm2,result) \
-     (MPIUNI_TMP = (void*)(long) (comm1),\
-     MPIUNI_TMP = (void*)(long) (comm2),\
+     (MPIUNI_TMP = (void*)(MPI_Aint) (comm1),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (comm2),\
      *(result)=MPI_IDENT,\
      MPI_SUCCESS)
 #define MPI_Comm_create(comm,group,newcomm)  \
      (*(newcomm) =  (comm),\
-     MPIUNI_TMP = (void*)(long) (group),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (group),\
      MPI_SUCCESS)
 #define MPI_Comm_create_group(comm,group,tag,newcomm)  \
      (*(newcomm) =  (comm),\
-     MPIUNI_TMP = (void*)(long) (group),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (group),\
      MPI_SUCCESS)
 #define MPI_Comm_split(comm,color,key,newcomm) MPI_SUCCESS
 #define MPI_Comm_test_inter(comm,flag) (*(flag)=1,MPI_SUCCESS)
@@ -651,16 +651,16 @@ extern double ESMC_MPI_Wtime(void);
 #define MPI_Get_processor_name(name,result_len) \
      (MPIUNI_Memcpy(name,"localhost",9*sizeof(char)),name[10] = 0,*(result_len) = 10)
 #define MPI_Errhandler_create(function,errhandler) \
-     (MPIUNI_TMP = (void*)(long) (errhandler),\
+     (MPIUNI_TMP = (void*)(MPI_Aint) (errhandler),\
      MPI_SUCCESS)
 #define MPI_Errhandler_set(comm,errhandler) \
-     (MPIUNI_TMP = (void*)(long) (comm),\
-     MPIUNI_TMP = (void*)(long) (errhandler),\
+     (MPIUNI_TMP = (void*)(MPI_Aint) (comm),\
+     MPIUNI_TMP = (void*)(MPI_Aint) (errhandler),\
      MPI_SUCCESS)
 #define MPI_Errhandler_get(comm,errhandler) MPI_SUCCESS
 #define MPI_Errhandler_free(errhandler) MPI_SUCCESS
 #define MPI_Error_string(errorcode,string,result_len) \
-  (MPIUNI_TMP = (void*)(long) (errorcode),\
+  (MPIUNI_TMP = (void*)(MPI_Aint) (errorcode),\
    string[0]='\0', \
    *result_len=0, \
    MPI_SUCCESS)
-- 
2.39.1

